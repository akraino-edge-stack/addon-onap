#{{ if not .Values.disablePortalVncPortal }}
kind: ConfigMap
metadata:
  name: vnc-profiles-ini
  namespace: "{{ .Values.nsPrefix }}-portal"
data:
{{ (.Files.Glob "resources/vnc/init_profile/profiles.ini").AsConfig | indent 2 }}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vnc-portal
  name: vnc-portal
  namespace: "{{ .Values.nsPrefix }}-portal"
spec:
  selector:
    matchLabels:
      app: vnc-portal
  template:
    metadata:
      labels:
        app: vnc-portal
      name: vnc-portal
#      annotations:
#        pod.beta.kubernetes.io/init-containers: '[
#          {
#              "args": [
#                  "--container-name",
#                  "portalapps"
#              ],
#              "command": [
#                  "/root/ready.py"
#              ],
#              "env": [
#                  {
#                      "name": "NAMESPACE",
#                      "valueFrom": {
#                          "fieldRef": {
#                              "apiVersion": "v1",
#                              "fieldPath": "metadata.namespace"
#                          }
#                      }
#                  }
#              ],
#              "image": "{{ .Values.image.readiness }}",
#              "imagePullPolicy": "{{ .Values.pullPolicy }}",
#              "name": "vnc-portal-readiness"
#          },
#          {
#              "args": [
#                  "--container-name",
#                  "pap"
#              ],
#              "command": [
#                  "/root/ready.py"
#              ],
#              "env": [
#                  {
#                      "name": "NAMESPACE",
#                      "value": "{{ .Values.nsPrefix }}-policy"
#                  }
#              ],
#              "image": "{{ .Values.image.readiness }}",
#              "imagePullPolicy": "{{ .Values.pullPolicy }}",
#              "name": "vnc-pap-readiness"
#          },
#          {
#              "args": [
#                  "--container-name",
#                  "sdc-fe"
#              ],
#              "command": [
#                  "/root/ready.py"
#              ],
#              "env": [
#                  {
#                      "name": "NAMESPACE",
#                      "value": "{{ .Values.nsPrefix }}-sdc"
#                  }
#              ],
#              "image": "{{ .Values.image.readiness }}",
#              "imagePullPolicy": "{{ .Values.pullPolicy }}",
#              "name": "vnc-sdc-readiness"
#          },
#          {
#              "args": [
#                  "--container-name",
#                  "vid-server"
#              ],
#              "command": [
#                  "/root/ready.py"
#              ],
#              "env": [
#                  {
#                      "name": "NAMESPACE",
#                      "value": "{{ .Values.nsPrefix }}-vid"
#                  }
#              ],
#              "image": "{{ .Values.image.readiness }}",
#              "imagePullPolicy": "{{ .Values.pullPolicy }}",
#              "name": "vnc-vid-readiness"
#          },
#          {
#              "command": ["/bin/sh","-c"],
#              "args": ["echo `host sdc-be.{{ .Values.nsPrefix }}-sdc | awk ''{print$4}''` sdc.api.be.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host portalapps.{{ .Values.nsPrefix }}-portal | awk ''{print$4}''` portal.api.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host pap.{{ .Values.nsPrefix }}-policy | awk ''{print$4}''` policy.api.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host sdc-fe.{{ .Values.nsPrefix }}-sdc | awk ''{print$4}''` sdc.api.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host vid-server.{{ .Values.nsPrefix }}-vid | awk ''{print$4}''` vid.api.simpledemo.onap.org >> /ubuntu-init/hosts; echo `host sparky-be.{{ .Values.nsPrefix }}-aai | awk ''{print$4}''` aai.api.simpledemo.onap.org  >> /ubuntu-init/hosts"],
#              "image": "{{ .Values.image.ubuntuInit }}",
#              "imagePullPolicy": "{{ .Values.pullPolicy }}",
#              "name": "vnc-init-hosts",
#              "volumeMounts": [
#                {
#                  "name": "ubuntu-init",
#                  "mountPath": "/ubuntu-init/"
#                }
#              ]
#          }
#          ]'
    spec:
      initContainers:
      - name: vnc-portal-readiness
        command: ['sh', '-c', '/root/ready.py --container-name portalapps']
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: {{ .Values.image.readiness }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /root/.kube/config
          name: kubeconf
      - name: vnc-pap-readiness
        command: ['sh', '-c', '/root/ready.py --container-name pap']
        env:
        - name: NAMESPACE
          value: {{ .Values.nsPrefix }}-policy
        image: {{ .Values.image.readiness }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /root/.kube/config
          name: kubeconf		  
      - name: vnc-sdc-readiness
        command: ['sh', '-c', '/root/ready.py --container-name sdc-fe']
        env:
        - name: NAMESPACE
          value: {{ .Values.nsPrefix }}-sdc
        image: {{ .Values.image.readiness }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /root/.kube/config
          name: kubeconf
      - name: vnc-vid-readiness
        command: ['sh', '-c', '/root/ready.py --container-name vid-server']
        env:
        - name: NAMESPACE
          value: {{ .Values.nsPrefix }}-vid
        image: {{ .Values.image.readiness }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /root/.kube/config
          name: kubeconf		  
      - name: vnc-init-hosts
        command: ['/bin/sh', '-c', 'echo `host sdc-be.{{ .Values.nsPrefix }}-sdc | awk ''{print$4}''` sdc.api.be.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host portalapps.{{ .Values.nsPrefix }}-portal | awk ''{print$4}''` portal.api.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host pap.{{ .Values.nsPrefix }}-policy | awk ''{print$4}''` policy.api.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host sdc-fe.{{ .Values.nsPrefix }}-sdc | awk ''{print$4}''` sdc.api.simpledemo.onap.org  >> /ubuntu-init/hosts; echo `host vid-server.{{ .Values.nsPrefix }}-vid | awk ''{print$4}''` vid.api.simpledemo.onap.org >> /ubuntu-init/hosts; echo `host sparky-be.{{ .Values.nsPrefix }}-aai | awk ''{print$4}''` aai.api.simpledemo.onap.org  >> /ubuntu-init/hosts']
        env:
        - name: NAMESPACE
          value: {{ .Values.nsPrefix }}-vid
        image: {{ .Values.image.ubuntuInit }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        volumeMounts:
        - mountPath: /ubuntu-init/
          name: ubuntu-init
      containers:
      - image: {{ .Values.image.ubuntuDesktop }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "mkdir -p /root/.mozilla/firefox/onap.default; cp /root/.init_profile/profiles.ini /root/.mozilla/firefox/; echo 'user_pref(\"browser.tabs.remote.autostart.2\", false);' > /root/.mozilla/firefox/onap.default/prefs.js; cat /ubuntu-init/hosts >> /etc/hosts"]
        env:
        - name: VNC_PASSWORD
          value: password
        name: vnc-portal
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /ubuntu-init/
          name: ubuntu-init
        - mountPath: /root/.init_profile/profiles.ini
          name: vnc-profiles-ini
          subPath: profiles.ini
        securityContext:
          privileged: true
      securityContext: {}
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: ubuntu-init
          emptyDir: {}
        - name: vnc-profiles-ini
          configMap:
            name: vnc-profiles-ini
        - name: kubeconf
          hostPath:
            path: /root/.kube/config
      imagePullSecrets:
      - name: "{{ .Values.nsPrefix }}-docker-registry-key"
#{{ end }}
